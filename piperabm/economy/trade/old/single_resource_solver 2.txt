"""
Solves a single resource for multiple players at fixed price
"""

from scipy.optimize import minimize

from piperabm.economy.accessibility import accessibility


def solver(players: list, price: float):
    """
    Solve the optimal trade between players
    """
    num_players = len(players)

    if num_players == 0:
        return players
    
    def objective(resource_allocations):
        accessibilities = [
            accessibility(
                players[i]['resource'] + resource_allocations[i],
                players[i]['enough_resource']
            )
            for i in range(num_players)
        ]
        return -sum(accessibilities)
    
    initial_guess = [0 for i in range(num_players)]
    constraints = {'type': 'eq', 'fun': lambda resource_allocations: sum(resource_allocations)}
    bounds = [          
            (-players[i]['resource'], min(players[i]['enough_resource'] - players[i]['resource'], players[i]['balance'] / price))
            for i in range(num_players)
        ]
    result = minimize(
        objective,
        initial_guess,
        constraints=constraints,
        bounds=bounds
    )
    print(result.x)

    resource_allocations = result.x
    #final_utilities = [utility(final_resources[i], enough_resources[i]) for i in range(num_players)]
    for i in range(num_players):
        resource_allocation = resource_allocations[i]
        players[i]['balance'] = float(players[i]['balance'] - resource_allocation * price)
        players[i]['resource'] = float(players[i]['resource'] + resource_allocation)
    return players


if __name__ == "__main__":
    price = 10
    player_1 = {
        'id': 1,
        'type': 'agent',
        'resource': 19,
        'enough_resource': 10,
        'balance': 100,
    }
    player_2 = {
        'id': 2,
        'type': 'agent',
        'resource': 8,
        'enough_resource': 10,
        'balance': 100,
    }
    player_3 = {
        'id': 3,
        'type': 'agent',
        'resource': 3,
        'enough_resource': 10,
        'balance': 10,
    }
    players = [player_1, player_2, player_3]

    print("Solves a single resource for multiple players at fixed price.")

    # Initial
    print(">>> Initial: ")
    for player in players:
        print(player)

    # Solve
    players = solver(players, price)

    # Final
    print(">>> Final: ")
    for player in players:
        print(player)
